Index: src/Controller/TaskController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace App\\Controller;\r\n\r\nuse App\\Entity\\Task;\r\nuse App\\Form\\TaskType;\r\nuse App\\Repository\\TaskRepository;\r\nuse Doctrine\\ORM\\EntityManagerInterface;\r\nuse Doctrine\\ORM\\OptimisticLockException;\r\nuse Doctrine\\ORM\\ORMException;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\n\r\nclass TaskController extends AbstractController\r\n{\r\n    public function __construct(private readonly EntityManagerInterface $entityManager,)\r\n    {\r\n\r\n    }\r\n\r\n    #[Route('/tasks', name: 'task_list', methods: ['GET'])]\r\n    public function list(TaskRepository $taskRepository): Response\r\n    {\r\n\r\n\r\n        $anonymousTasks = null;\r\n        if (in_array('ROLE_ADMIN', $this->getUser()->getRoles())) {\r\n            $anonymousTasks = $taskRepository->findBy(['user' => [null]], ['title' => 'ASC']);\r\n        }\r\n        return $this->render('task/list.html.twig', [\r\n            'tasks' => $taskRepository->findBy(['user' => $this->getUser()], ['title' => 'ASC']),\r\n            'anonymous_tasks' => $anonymousTasks\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @throws OptimisticLockException\r\n     * @throws ORMException\r\n     */\r\n    #[Route('/tasks/create', name: 'task_create', methods: ['GET', 'POST'])]\r\n    public function create(Request $request): Response\r\n    {\r\n        $task = new Task();\r\n        $form = $this->createForm(TaskType::class, $task);\r\n\r\n        $form->handleRequest($request);\r\n\r\n        if ($form->isSubmitted() && $form->isValid()) {\r\n            $task->setUser($this->getUser());\r\n            $task = $form->getData();\r\n            $this->entityManager->persist($task);\r\n            $this->entityManager->flush();\r\n\r\n            $this->addFlash('success', sprintf('La tâche %s a été bien été ajoutée.', $task->getTitle()));\r\n\r\n            return $this->redirectToRoute('task_list', [], Response::HTTP_SEE_OTHER);\r\n        }\r\n\r\n        return $this->render('task/create.html.twig', [\r\n                'form' => $form->createView()]\r\n        );\r\n    }\r\n\r\n\r\n    #[Route('/tasks/{id}/edit', name: 'task_edit', methods: ['GET', 'POST'])]\r\n    public function edit(Task $task, Request $request): Response\r\n    {\r\n        $form = $this->createForm(TaskType::class, $task);\r\n\r\n        $form->handleRequest($request);\r\n\r\n        if ($form->isSubmitted() && $form->isValid()) {\r\n            $task = $form->getData();\r\n            $this->entityManager->persist($task);\r\n            $this->entityManager->flush();\r\n            $this->addFlash('success', 'La tâche a bien été modifiée.');\r\n\r\n            return $this->redirectToRoute('task_list', [], Response::HTTP_SEE_OTHER);\r\n        }\r\n\r\n        return $this->render('task/edit.html.twig', [\r\n                'form' => $form->createView(),\r\n                'task' => $task,\r\n            ]\r\n        );\r\n    }\r\n\r\n    #[Route('/tasks/{id}/toggle', name: 'task_toggle')]\r\n    public function toggleTask(Task $task): Response\r\n    {\r\n        $task->toggle(!$task->isDone());\r\n        $this->entityManager->flush();\r\n\r\n        $this->addFlash('success', sprintf('La tâche %s a bien été marquée comme faite.', $task->getTitle()));\r\n\r\n        return $this->redirectToRoute('task_list', [], Response::HTTP_SEE_OTHER);\r\n    }\r\n\r\n    /**\r\n     * @throws OptimisticLockException\r\n     * @throws ORMException\r\n     */\r\n    #[Route('/tasks/{id}/delete', name: 'task_delete')]\r\n    public function deleteTask(Task $task, TaskRepository $taskRepository): Response\r\n    {\r\n//        $this->denyAccessUnlessGranted('DELETE_TASK', $task,\r\n//            'vous n\\'avez pas accès à la suppression de cette tâche');\r\n        if ($task->getUser() !== null) {\r\n            $this->getUser()->removeTask($task);\r\n        }\r\n        $taskRepository->remove($task);\r\n        $this->addFlash('success', 'La tâche a bien été supprimée.');\r\n        return $this->redirectToRoute('task_list', [], Response::HTTP_SEE_OTHER);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Controller/TaskController.php b/src/Controller/TaskController.php
--- a/src/Controller/TaskController.php	(revision f1d9be027f19e973e13cb8db4f034dfa8b03e005)
+++ b/src/Controller/TaskController.php	(date 1676363737077)
@@ -25,8 +25,6 @@
     #[Route('/tasks', name: 'task_list', methods: ['GET'])]
     public function list(TaskRepository $taskRepository): Response
     {
-
-
         $anonymousTasks = null;
         if (in_array('ROLE_ADMIN', $this->getUser()->getRoles())) {
             $anonymousTasks = $taskRepository->findBy(['user' => [null]], ['title' => 'ASC']);
